
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-suse-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dynatop"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "dynatop-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('dynatop')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Swindale")
> ### * Swindale
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Swindale
> ### Title: Example dynamic TOPMODEL setup
> ### Aliases: Swindale
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(dynatop)
> data(Swindale)
> 
> # Show it
> # plot(obs)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Swindale", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dynatop")
> ### * dynatop
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dynatop
> ### Title: R6 Class for Dynamic TOPMODEL
> ### Aliases: dynatop
> 
> ### ** Examples
> 
> ## the vignettes contains further details of the method calls.
> 
> data("Swindale") ## example data
> mdl <- Swindale$model
> mdl$map <- system.file("extdata","Swindale.tif",package="dynatop",mustWork=TRUE)
> ctch_mdl <- dynatop$new(mdl$hru,map=mdl$map) ## create with model
> ctch_mdl$add_data(Swindale$obs) ## add observations
> ctch_mdl$initialise() ## initialise model
> ctch_mdl$sim(Swindale$model$output_flux) ## simulate model
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dynatop", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("evap_est")
> ### * evap_est
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: evap_est
> ### Title: Create sinusoidal time series of potential evapotranspiration
> ###   input
> ### Aliases: evap_est
> 
> ### ** Examples
> 
> ## Generating daily PET data for 1970
> ## the values of eMin and eMax may not by not be realistic
> st <- as.POSIXct("1970-01-02 00:00:00",tz='GMT')
> fn <- as.POSIXct("1971-01-01 00:00:00",tz='GMT')
> daily_ts <- seq(st,fn,by=24*60*60)
> dpet <- evap_est(daily_ts,0,1)
> 
> ## create hourly data for the same period
> st <- as.POSIXct("1970-01-01 01:00:00",tz='GMT')
> fn <- as.POSIXct("1971-01-01 00:00:00",tz='GMT')
> hour_ts <- seq(st,fn,by=1*60*60)
> hpet <- evap_est(hour_ts,0,1)
> 
> ## the totals should eb the same...
> stopifnot(all.equal(sum(hpet), sum(dpet)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("evap_est", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("resample_xts")
> ### * resample_xts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: resample_xts
> ### Title: Functions to resample an xts time series
> ### Aliases: resample_xts
> 
> ### ** Examples
> 
> # Resample Swindale Rainfall to hourly intervals
> require(dynatop)
> data("Swindale")
> obs <- Swindale$obs
> cobs <- resample_xts(obs, dt=60*60) # hourly data
> dobs <- resample_xts(cobs,dt=15*60) # back to 15 minute data
> cdobs <- resample_xts(dobs,dt=60*60) # back to hourly data - checks time stamp conversion
> obs <- obs[zoo::index(obs)<=max(zoo::index(cobs)),]
> 
> # check totals
> stopifnot( all.equal(sum(obs),sum(cobs)) )
> stopifnot( all.equal(sum(obs),sum(dobs)) )
> stopifnot( all.equal(cobs,cdobs) )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("resample_xts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.878 1.015 2.71 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
